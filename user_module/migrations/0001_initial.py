# Generated by Django 4.1.6 on 2023-02-11 06:18

import django.core.validators
from django.db import migrations, models
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True, validators=[django.core.validators.EmailValidator(), django.core.validators.RegexValidator(code='invalid_username', message='Email does not belong to bvp.edu', regex='^[a-zA-Z0-9._%+-]+\\-coemumbai@bvp.edu.in$')])),
                ('MIS_no', models.IntegerField(blank=True, null=True, unique=True)),
                ('Bio', models.TextField(blank=True, default='  ')),
                ('First_name', models.CharField(blank=True, max_length=225, null=True)),
                ('middle_name', models.CharField(blank=True, max_length=225, null=True)),
                ('Last_name', models.CharField(blank=True, max_length=225, null=True)),
                ('Date_Of_Birth', models.DateField(blank=True, null=True)),
                ('Country_name', models.CharField(blank=True, max_length=20, null=True)),
                ('State_name', models.CharField(blank=True, max_length=20, null=True)),
                ('Locality_name', models.CharField(blank=True, max_length=20, null=True)),
                ('PostalCode', models.IntegerField(blank=True, null=True, validators=[django.core.validators.RegexValidator(code='invalid_username', message='Invalid postal Code', regex='^[0-9]{6}|[0-9]{3}\\s[0-9]{3}$')])),
                ('Building_name_And_RoomNumber', models.TextField(blank=True, null=True)),
                ('Student_phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region='IN')),
                ('Parent_phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region='IN')),
                ('Roll_no', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('JEE', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('MhCET', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('SSC', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('HSC', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('Diploma', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('Sem1', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('Sem2', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('Sem3', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('Sem4', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('Sem5', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('Sem6', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('Sem7', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('Sem8', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('DeadKT', models.BooleanField(default=False)),
                ('No_Of_DeadKT', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)])),
                ('LiveKT', models.BooleanField(default=False)),
                ('No_Of_LiveKT', models.IntegerField(blank=True, default=False, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)])),
                ('Gate_Status', models.BooleanField(default=False)),
                ('future_options', models.CharField(blank=True, choices=[('job', 'Job'), ('Hs', 'Higher-Studies'), ('entru', 'Entrepreneurship')], max_length=10, null=True)),
                ('linkedin_profile', models.URLField(blank=True, null=True, validators=[django.core.validators.RegexValidator(code='invalid_username', message='Username must be Alphanumeric', regex='^https?://((www|\\w\\w)\\.)?linkedin.com/((in/[^/]+/?)|(pub/[^/]+/((\\w|\\d)+/?){3}))$')])),
                ('Github_profile', models.URLField(blank=True, null=True, validators=[django.core.validators.RegexValidator(code='invalid_username', message='Username must be Alphanumeric', regex='^https?://((www|\\w\\w)\\.)?github.com/((in/[^/]+/?)|(pub/[^/]+/((\\w|\\d)+/?){3}))$')])),
                ('Resume_profile', models.URLField(blank=True, null=True, validators=[django.core.validators.RegexValidator(code='invalid_username', message='Username must be Alphanumeric', regex='((http|https)://)(www.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)')])),
                ('Internship', models.TextField(blank=True, null=True)),
                ('collage_passingYear', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(2015), django.core.validators.MaxValueValidator(2050)])),
                ('collage_joinig_year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(2015), django.core.validators.MaxValueValidator(2050)])),
                ('i_card_image', models.ImageField(blank=True, null=True, upload_to='UserImage', validators=[django.core.validators.validate_image_file_extension])),
                ('re_password', models.CharField(blank=True, help_text='just to check password twice', max_length=128, null=True)),
                ('email_token', models.CharField(blank=True, max_length=53, null=True)),
                ('email_token_dateTime_expire', models.DateTimeField(auto_now_add=True, null=True)),
                ('email_verified', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_suspended', models.BooleanField(default=False)),
                ('is_faculty', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'permissions': [('can_view_all_student', 'access to view all student')],
            },
        ),
    ]
